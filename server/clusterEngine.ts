import { CandleData, Cluster, OrderBookData, OrderBookLevel } from "@shared/schema";

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –∫–ª–∞—Å—Ç–µ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: Smart Refresh, Adaptive Cluster Size, Depth Filter
 */
export class ClusterEngine {
  private atrCache = new Map<string, number>();
  private lastProcessedPrice = new Map<string, number>();
  private clusterCache = new Map<string, { data: CandleData[], timestamp: number }>();
  private readonly CACHE_TTL = 60000; // 1 –º–∏–Ω—É—Ç–∞
  private readonly PRICE_CHANGE_THRESHOLD = 0.0005; // 0.05% –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

  /**
   * üìä Adaptive Cluster Size - —à–∞–≥ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç ATR
   */
  calculateATR(candles: CandleData[], period: number = 14): number {
    if (candles.length < 2) return 0.001; // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    const trueRanges: number[] = [];
    
    for (let i = 1; i < Math.min(candles.length, period + 1); i++) {
      const current = candles[i];
      const previous = candles[i - 1];
      
      const tr1 = current.high - current.low;
      const tr2 = Math.abs(current.high - previous.close);
      const tr3 = Math.abs(current.low - previous.close);
      
      trueRanges.push(Math.max(tr1, tr2, tr3));
    }

    return trueRanges.reduce((sum, tr) => sum + tr, 0) / trueRanges.length;
  }

  /**
   * üîÑ Smart Refresh - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–Ω–∞—á–∏–º–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
   */
  shouldRefreshClusters(symbol: string, currentPrice: number): boolean {
    const lastPrice = this.lastProcessedPrice.get(symbol);
    if (!lastPrice) {
      this.lastProcessedPrice.set(symbol, currentPrice);
      return true;
    }

    const priceChange = Math.abs(currentPrice - lastPrice) / lastPrice;
    if (priceChange > this.PRICE_CHANGE_THRESHOLD) {
      this.lastProcessedPrice.set(symbol, currentPrice);
      return true;
    }

    return false;
  }

  /**
   * üß† Enhanced Cluster Generation with ATR-based sizing
   */
  generateAdaptiveClusters(
    low: number, 
    high: number, 
    totalVolume: number, 
    totalBuyVolume: number, 
    totalSellVolume: number,
    atr: number,
    currentPrice: number
  ): Cluster[] {
    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
    const baseClusterSize = atr * 0.5; // 50% –æ—Ç ATR
    const priceRange = high - low;
    const optimalClusters = Math.max(5, Math.min(25, Math.floor(priceRange / baseClusterSize)));
    
    const clusters: Cluster[] = [];
    const step = priceRange / optimalClusters;

    for (let i = 0; i < optimalClusters; i++) {
      const price = low + (step * i) + (step / 2);
      
      // –£–º–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω—è
      const distanceFromCurrent = Math.abs(price - currentPrice);
      const distanceFromMiddle = Math.abs(price - (high + low) / 2);
      
      // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å: –±–ª–∏–∑–æ—Å—Ç—å –∫ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ + —Ü–µ–Ω—Ç—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞
      const currentPriceWeight = 1 / (1 + distanceFromCurrent / currentPrice);
      const middleWeight = 1 - (distanceFromMiddle / (priceRange / 2));
      const importance = (currentPriceWeight * 0.6 + middleWeight * 0.4);
      
      // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ —Å —É—á–µ—Ç–æ–º –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
      const volumeMultiplier = importance * (0.7 + Math.random() * 0.6);
      const volume = (totalVolume / optimalClusters) * volumeMultiplier;
      
      // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫/–ø—Ä–æ–¥–∞–∂
      const baseRatio = totalBuyVolume / totalVolume;
      const pricePosition = (price - low) / priceRange; // 0-1
      
      // –ü–æ–∫—É–ø–∫–∏ —á–∞—â–µ –≤–Ω–∏–∑—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –ø—Ä–æ–¥–∞–∂–∏ - –≤–≤–µ—Ä—Ö—É
      const positionBias = pricePosition < 0.5 ? (1 - pricePosition) * 0.2 : -pricePosition * 0.2;
      const buyRatio = Math.max(0.1, Math.min(0.9, baseRatio + positionBias + (Math.random() - 0.5) * 0.1));
      
      const buyVolume = volume * buyRatio;
      const sellVolume = volume - buyVolume;
      const delta = buyVolume - sellVolume;
      const aggression = volume > 0 ? Math.abs(delta) / volume : 0;

      clusters.push({
        price,
        volume,
        buyVolume,
        sellVolume,
        delta,
        aggression,
      });
    }

    return clusters.sort((a, b) => b.volume - a.volume);
  }

  /**
   * üîÆ Predictive Preload - –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
   */
  preloadHistoricalClusters(
    symbol: string, 
    interval: string, 
    fromTime: number, 
    toTime: number
  ): CandleData[] {
    const cacheKey = `${symbol}_${interval}_${fromTime}_${toTime}`;
    const cached = this.clusterCache.get(cacheKey);
    
    if (cached && Date.now() - cached.timestamp < this.CACHE_TTL) {
      return cached.data;
    }

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    const data: CandleData[] = [];
    this.clusterCache.set(cacheKey, { data, timestamp: Date.now() });
    
    return data;
  }

  /**
   * üìà Enhanced Single Candle with Adaptive Clustering
   */
  generateEnhancedCandle(
    time: number, 
    startPrice: number, 
    interval: string,
    historicalCandles: CandleData[] = []
  ): CandleData {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ATR –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    const atr = this.calculateATR(historicalCandles);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Å–≤–µ—á—É
    const volatility = Math.max(0.005, atr / startPrice * 2); // –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
    const trend = (Math.random() - 0.5) * 0.005; // –ù–µ–±–æ–ª—å—à–æ–π —Ç—Ä–µ–Ω–¥
    
    const open = startPrice;
    const priceChange = startPrice * (trend + (Math.random() - 0.5) * volatility);
    const close = Math.max(open + priceChange, 1);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º high/low —Å —É—á–µ—Ç–æ–º ATR
    const atrMultiplier = 0.5 + Math.random();
    const wickRange = atr * atrMultiplier;
    
    const high = Math.max(open, close) + Math.random() * wickRange;
    const low = Math.min(open, close) - Math.random() * wickRange;

    // –û–±—ä–µ–º –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
    const baseVolume = 50 + Math.random() * 150;
    const volatilityMultiplier = 1 + Math.abs(priceChange / startPrice) * 20;
    const volume = baseVolume * volatilityMultiplier;

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫/–ø—Ä–æ–¥–∞–∂
    const isGreen = close > open;
    const buyRatio = isGreen ? 0.55 + Math.random() * 0.25 : 0.25 + Math.random() * 0.3;
    const buyVolume = volume * buyRatio;
    const sellVolume = volume - buyVolume;
    const delta = buyVolume - sellVolume;

    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã —Å —É—á–µ—Ç–æ–º ATR
    const clusters = this.generateAdaptiveClusters(
      low, high, volume, buyVolume, sellVolume, atr, close
    );

    return {
      time,
      open,
      high,
      low,
      close,
      volume,
      buyVolume,
      sellVolume,
      delta,
      clusters,
    };
  }

  /**
   * üìä Depth Filter - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞–∫–∞–Ω–∞ –ø–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≥–ª—É–±–∏–Ω–µ
   */
  filterDepth(
    orderBook: OrderBookData, 
    centerPrice: number, 
    rangePercent: number = 2
  ): OrderBookData {
    const minPrice = centerPrice * (1 - rangePercent / 100);
    const maxPrice = centerPrice * (1 + rangePercent / 100);
    
    const filteredBids = orderBook.bids
      .filter(level => level.price >= minPrice && level.price <= centerPrice)
      .sort((a, b) => b.price - a.price) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–ª—è –±–∏–¥–æ–≤
      .slice(0, 50); // –ú–∞–∫—Å–∏–º—É–º 50 —É—Ä–æ–≤–Ω–µ–π
    
    const filteredAsks = orderBook.asks
      .filter(level => level.price <= maxPrice && level.price >= centerPrice)
      .sort((a, b) => a.price - b.price) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–ª—è –∞—Å–∫–æ–≤
      .slice(0, 50); // –ú–∞–∫—Å–∏–º—É–º 50 —É—Ä–æ–≤–Ω–µ–π

    return {
      bids: filteredBids,
      asks: filteredAsks,
      lastUpdate: orderBook.lastUpdate,
    };
  }

  /**
   * üßπ Cache Management
   */
  cleanupCache(): void {
    const now = Date.now();
    const keysToDelete: string[] = [];
    
    this.clusterCache.forEach((value, key) => {
      if (now - value.timestamp > this.CACHE_TTL) {
        keysToDelete.push(key);
      }
    });
    
    keysToDelete.forEach(key => this.clusterCache.delete(key));
  }

  /**
   * üìä Volume Profile Generation
   */
  generateVolumeProfile(
    candles: CandleData[], 
    priceLevels: number = 50
  ): Array<{ price: number; volume: number; buyVolume: number; sellVolume: number }> {
    if (!candles.length) return [];

    const minPrice = Math.min(...candles.map(c => c.low));
    const maxPrice = Math.max(...candles.map(c => c.high));
    const priceStep = (maxPrice - minPrice) / priceLevels;
    
    const profile = Array.from({ length: priceLevels }, (_, i) => ({
      price: minPrice + (priceStep * i) + (priceStep / 2),
      volume: 0,
      buyVolume: 0,
      sellVolume: 0,
    }));

    // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã –ø–æ —É—Ä–æ–≤–Ω—è–º —Ü–µ–Ω
    candles.forEach(candle => {
      candle.clusters?.forEach(cluster => {
        const levelIndex = Math.floor((cluster.price - minPrice) / priceStep);
        if (levelIndex >= 0 && levelIndex < priceLevels) {
          profile[levelIndex].volume += cluster.volume;
          profile[levelIndex].buyVolume += cluster.buyVolume;
          profile[levelIndex].sellVolume += cluster.sellVolume;
        }
      });
    });

    return profile.filter(level => level.volume > 0);
  }

  /**
   * üîÑ Update ATR Cache
   */
  updateATRCache(symbol: string, candles: CandleData[]): void {
    const atr = this.calculateATR(candles);
    this.atrCache.set(symbol, atr);
  }

  /**
   * üìà Get Cached ATR
   */
  getCachedATR(symbol: string): number {
    return this.atrCache.get(symbol) || 0.001;
  }
}